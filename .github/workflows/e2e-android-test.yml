name: E2E Android Test - Full Pipeline Example

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
#  schedule:
#    - cron: '0 2 * * *' # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      clear_cache:
        description: 'Clear all caches and rebuild from scratch'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  e2e-android-pipeline:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest  # Ubuntu x64 with ARM64 emulation
            android-api: 30
            arch: arm64
          - os: macos-latest  # macOS on Apple Silicon (M1/M2)
            android-api: 30
            arch: arm64
    runs-on: ${{ matrix.os }}

    steps:
      # === SETUP PHASE ===
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            setup.py

      - name: Install OVMobileBench
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Install build tools
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y ccache ninja-build
          elif [ "${{ runner.os }}" = "macOS" ]; then
            brew install ccache ninja
          fi

      - name: Setup Java for Android
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Enable KVM for Android emulator (Linux only)
        if: runner.os == 'Linux'
        run: bash tests/e2e/scripts/setup_kvm_linux.sh

      - name: Enable Hypervisor.framework for Android emulator (macOS only)
        if: runner.os == 'macOS'
        run: bash tests/e2e/scripts/setup_hypervisor_macos.sh

      - name: Cache OVMobileBench cache directory
        uses: actions/cache@v4
        id: android-cache
        with:
          path: ~/ovmb_cache
          key: ovmb-cache-${{ runner.os }}-${{ matrix.android-api }}-${{ matrix.arch }}-v3${{
            github.event.inputs.clear_cache == 'true' && '-nocache' || '' }}
          restore-keys: |
            ovmb-cache-${{ runner.os }}-${{ matrix.android-api }}-
            ovmb-cache-${{ runner.os }}-

      - name: Setup Android SDK/NDK via OVMobileBench
        run: |
          # Check if cache was forced to be cleared
          if [ "${{ github.event.inputs.clear_cache }}" = "true" ]; then
            echo "🧹 Cache clearing was requested - installing from scratch"
            rm -rf $HOME/ovmb_cache ~/.android 2>/dev/null || true
          fi

          # Setup Android SDK/NDK - OVMobileBench will use config to determine paths
          echo "🔧 Setting up Android SDK/NDK via OVMobileBench..."
          # OVMobileBench will read the config and use cache_dir/android-sdk automatically
          if [ "${{ steps.android-cache.outputs.cache-hit }}" != 'true' ] || \
             [ ! -d "$HOME/ovmb_cache/android-sdk" ]; then
            echo "📦 Cache miss or incomplete - Installing from scratch..."
            echo "This will take 5-10 minutes to download and install all components"
            # Full installation - config will determine SDK location
            python -m ovmobilebench.cli setup-android \
              --api ${{ matrix.android-api }} \
              --create-avd \
              --verbose
          else
            echo "⚡ Cache hit - Verifying existing installation via OVMobileBench..."
            # First try verification only
            if python -m ovmobilebench.cli setup-android \
              --api ${{ matrix.android-api }} \
              --verify-only \
              --verbose; then
              echo "✅ Verification passed - using cached installation"
            else
              echo "⚠️ Verification failed - reinstalling missing components..."
              python -m ovmobilebench.cli setup-android \
                --api ${{ matrix.android-api }} \
                --create-avd \
                --verbose
            fi
          fi

          # Display cache stats
          echo "📊 Android SDK setup complete:"
          echo "  Cache size: $(du -sh $HOME/ovmb_cache 2>/dev/null || echo 'calculating...')"

      # === PREPARE EMULATOR ===
      - name: Start Android Emulator
        run: |
          python tests/e2e/test_emulator_helper.py start-emulator &
          python tests/e2e/test_emulator_helper.py wait-for-boot

      # === CACHE SETUP ===
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('tests/e2e/configs/android_resnet50.yaml') }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ matrix.arch }}-
            ccache-${{ runner.os }}-

      - name: Configure ccache
        run: |
          echo "Configuring ccache for cross-compilation..."
          ccache --max-size=2G
          ccache --set-config=compiler_check=content
          ccache --set-config=sloppiness=include_file_ctime,include_file_mtime,time_macros
          ccache --set-config=hash_dir=false
          ccache --zero-stats
          ccache --show-config

      # Models are already in ovmb_cache, no separate cache needed

      # === PREPARE MODEL ===
      - name: Download ResNet-50 model
        run: python tests/e2e/test_model_helper.py download-resnet50

      # === OVMOBILEBENCH PIPELINE ===
      - name: List available devices
        run: python -m ovmobilebench.cli list-devices

      - name: Build OpenVINO for Android
        run: |
          python -m ovmobilebench.cli build \
            -c tests/e2e/configs/android_resnet50.yaml \
            --verbose

          # Show ccache statistics
          echo "📊 ccache statistics:"
          ccache --show-stats

      - name: Package OpenVINO runtime and model
        run: |
          python -m ovmobilebench.cli package \
            -c tests/e2e/configs/android_resnet50.yaml \
            --verbose

      - name: Deploy to Android device
        run: |
          python -m ovmobilebench.cli deploy \
            -c tests/e2e/configs/android_resnet50.yaml \
            --verbose

      - name: Run benchmark on device
        run: |
          python -m ovmobilebench.cli run \
            -c tests/e2e/configs/android_resnet50.yaml \
            --verbose

      - name: Generate benchmark report
        run: |
          python -m ovmobilebench.cli report \
            -c tests/e2e/configs/android_resnet50.yaml \
            --verbose

      # === ALTERNATIVE: Run all stages at once ===
      - name: Run complete pipeline (alternative)
        if: false  # Set to true to use this instead of individual stages
        run: |
          python -m ovmobilebench.cli all \
            -c tests/e2e/configs/android_resnet50.yaml \
            --verbose

      # === VALIDATION ===
      - name: Validate results
        run: python tests/e2e/test_validate_results.py

      - name: Display benchmark results
        run: python tests/e2e/test_display_results.py

      # === CLEANUP ===
      - name: Stop emulator
        if: always()
        run: python tests/e2e/test_emulator_helper.py stop-emulator

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ matrix.os }}-api${{ matrix.android-api }}
          path: |
            artifacts/
          retention-days: 7

      # === REPORT TO PR ===
      - name: Post results to PR
        if: github.event_name == 'pull_request'
        run: |
          python tests/e2e/test_pr_comment.py \
            --api ${{ matrix.android-api }} \
            --pr ${{ github.event.pull_request.number }}
