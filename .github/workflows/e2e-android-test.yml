name: E2E Android Test - Full Pipeline Example

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
#  schedule:
#    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      clear_cache:
        description: 'Clear all caches and rebuild from scratch'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  e2e-android-pipeline:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest  # Ubuntu x64 with ARM64 emulation
            android-api: 30
            arch: arm64
          - os: macos-latest  # macOS on Apple Silicon (M1/M2)
            android-api: 30
            arch: arm64
    runs-on: ${{ matrix.os }}

    steps:
      # === SETUP PHASE ===
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt', 'pyproject.toml') }}${{
            github.event.inputs.clear_cache == 'true' && '-nocache' || '' }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install OVMobileBench
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Setup Java for Android
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Enable KVM for Android emulator (Linux only)
        if: runner.os == 'Linux'
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' |
            sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Enable Hypervisor.framework for Android emulator (macOS only)
        if: runner.os == 'macOS'
        run: |
          # Hypervisor.framework is enabled by default on GitHub Actions macOS runners
          # Just verify it's available
          sysctl -n kern.hv_support || echo "Hypervisor.framework not available"
          # Set environment variable for emulator to use HAXM/Hypervisor
          echo "ANDROID_EMULATOR_USE_SYSTEM_LIBS=1" >> $GITHUB_ENV

      - name: Cache Android SDK
        uses: actions/cache@v4
        id: android-cache
        with:
          path: |
            ~/android-sdk
            ~/.android
          key: android-sdk-${{ runner.os }}-${{ matrix.android-api }}-${{ matrix.arch }}-v2${{
            github.event.inputs.clear_cache == 'true' && '-nocache' || '' }}
          restore-keys: |
            android-sdk-${{ runner.os }}-${{ matrix.android-api }}-
            android-sdk-${{ runner.os }}-

      - name: Setup Android SDK/NDK via OVMobileBench
        run: |
          # Set Android SDK location
          export ANDROID_HOME=$HOME/android-sdk
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV

          # Check if cache was forced to be cleared
          if [ "${{ github.event.inputs.clear_cache }}" = "true" ]; then
            echo "🧹 Cache clearing was requested - installing from scratch"
            rm -rf $ANDROID_HOME ~/.android 2>/dev/null || true
          fi

          # Always use OVMobileBench for setup - it handles existing installations smartly
          echo "🔧 Setting up Android SDK/NDK via OVMobileBench..."
          if [ "${{ steps.android-cache.outputs.cache-hit }}" != 'true' ] || [ ! -d "$ANDROID_HOME" ]; then
            echo "📦 Cache miss or incomplete - Installing from scratch..."
            echo "This will take 5-10 minutes to download and install all components"
            # Full installation
            python -m ovmobilebench.cli setup-android \
              --api ${{ matrix.android-api }} \
              --create-avd \
              --sdk-root $ANDROID_HOME \
              --verbose
          else
            echo "⚡ Cache hit - Verifying existing installation via OVMobileBench..."
            # First try verification only
            if python -m ovmobilebench.cli setup-android \
              --api ${{ matrix.android-api }} \
              --sdk-root $ANDROID_HOME \
              --verify-only \
              --verbose; then
              echo "✅ Verification passed - using cached installation"
            else
              echo "⚠️ Verification failed - reinstalling missing components..."
              python -m ovmobilebench.cli setup-android \
                --api ${{ matrix.android-api }} \
                --create-avd \
                --sdk-root $ANDROID_HOME \
                --verbose
            fi
          fi

          # Set environment variables
          echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/26.3.11579264" >> $GITHUB_ENV
          SDK_PATH="$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator"
          SDK_PATH="$SDK_PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$PATH"
          echo "PATH=$SDK_PATH" >> $GITHUB_ENV

          # Display cache stats
          echo "📊 Android SDK setup complete:"
          echo "  SDK size: $(du -sh $ANDROID_HOME 2>/dev/null || echo 'calculating...')"

      # === PREPARE EMULATOR ===
      - name: Start Android Emulator
        run: |
          python tests/e2e/test_emulator_helper.py start-emulator &
          python tests/e2e/test_emulator_helper.py wait-for-boot

      # === CACHE SETUP ===
      - name: Cache OpenVINO build artifacts
        uses: actions/cache@v4
        with:
          path: |
            artifacts/
            ~/.cmake
          key: openvino-build-${{ runner.os }}-${{ matrix.arch }}-${{
            hashFiles('tests/e2e/configs/android_resnet50.yaml') }}-v1${{
            github.event.inputs.clear_cache == 'true' && '-nocache' || '' }}
          restore-keys: |
            openvino-build-${{ runner.os }}-${{ matrix.arch }}-
            openvino-build-${{ runner.os }}-

      - name: Cache models
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ovmobilebench/models/
          key: models-resnet50-v1${{
            github.event.inputs.clear_cache == 'true' && '-nocache' || '' }}
          restore-keys: |
            models-resnet50-

      # === PREPARE MODEL ===
      - name: Download ResNet-50 model
        run: python tests/e2e/test_model_helper.py download-resnet50

      # === OVMOBILEBENCH PIPELINE ===
      - name: List available devices
        run: python -m ovmobilebench.cli list-devices

      - name: Build OpenVINO for Android
        run: |
          python -m ovmobilebench.cli build \
            -c tests/e2e/configs/android_resnet50.yaml \
            --verbose

      - name: Package OpenVINO runtime and model
        run: |
          python -m ovmobilebench.cli package \
            -c tests/e2e/configs/android_resnet50.yaml \
            --verbose

      - name: Deploy to Android device
        run: |
          python -m ovmobilebench.cli deploy \
            -c tests/e2e/configs/android_resnet50.yaml \
            --verbose

      - name: Run benchmark on device
        run: |
          python -m ovmobilebench.cli run \
            -c tests/e2e/configs/android_resnet50.yaml \
            --verbose

      - name: Generate benchmark report
        run: |
          python -m ovmobilebench.cli report \
            -c tests/e2e/configs/android_resnet50.yaml \
            --verbose

      # === ALTERNATIVE: Run all stages at once ===
      - name: Run complete pipeline (alternative)
        if: false  # Set to true to use this instead of individual stages
        run: |
          python -m ovmobilebench.cli all \
            -c tests/e2e/configs/android_resnet50.yaml \
            --verbose

      # === VALIDATION ===
      - name: Validate results
        run: python tests/e2e/test_validate_results.py

      - name: Display benchmark results
        run: python tests/e2e/test_display_results.py

      # === CLEANUP ===
      - name: Stop emulator
        if: always()
        run: python tests/e2e/test_emulator_helper.py stop-emulator

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ matrix.os }}-api${{ matrix.android-api }}
          path: |
            artifacts/
          retention-days: 7

      # === REPORT TO PR ===
      - name: Post results to PR
        if: github.event_name == 'pull_request'
        run: |
          python tests/e2e/test_pr_comment.py \
            --api ${{ matrix.android-api }} \
            --pr ${{ github.event.pull_request.number }}
