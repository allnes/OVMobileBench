name: 'Setup Python with Cached Dependencies'
description: 'Setup Python and cache entire site-packages directory'

inputs:
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.11'

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: Get Python paths
      id: python-paths
      shell: bash
      run: |
        # Get Python paths using Python
        python << 'EOF'
        import os
        import sys
        import site
        import subprocess
        
        # Get site-packages path
        site_packages = site.getsitepackages()[0]
        
        # Get pip cache dir
        pip_cache = subprocess.check_output([sys.executable, "-m", "pip", "cache", "dir"]).decode().strip()
        
        # Get Python bin directory
        python_bin = os.path.dirname(sys.executable)
        
        # Output for GitHub Actions
        output_file = os.environ.get('GITHUB_OUTPUT', '')
        if output_file:
            with open(output_file, 'a') as f:
                f.write(f"site-packages={site_packages}\n")
                f.write(f"pip-cache={pip_cache}\n")
                f.write(f"python-bin={python_bin}\n")
                f.write(f"python-version={sys.version}\n")
        EOF

    - name: Cache Python environment
      uses: actions/cache@v3
      id: python-cache
      with:
        path: |
          ${{ steps.python-paths.outputs.site-packages }}
          ${{ steps.python-paths.outputs.pip-cache }}
          ~/.local/bin
          ~/.local/lib
          ~/Library/Python
          /opt/hostedtoolcache/Python/*/x64/bin
          /opt/hostedtoolcache/Python/*/x64/lib/python*/site-packages
        key: ${{ runner.os }}-py${{ inputs.python-version }}-${{ hashFiles('requirements.txt', 'pyproject.toml') }}-v3
        restore-keys: |
          ${{ runner.os }}-py${{ inputs.python-version }}-

    - name: Install dependencies
      shell: bash
      run: |
        echo "Cache hit: ${{ steps.python-cache.outputs.cache-hit }}"
        echo "Python version: ${{ steps.python-paths.outputs.python-version }}"
        echo "Site packages: ${{ steps.python-paths.outputs.site-packages }}"
        echo "Python bin: ${{ steps.python-paths.outputs.python-bin }}"
        
        # Set up PATH first
        export PATH="${{ steps.python-paths.outputs.python-bin }}:$HOME/.local/bin:$PATH"
        echo "PATH=${{ steps.python-paths.outputs.python-bin }}:$HOME/.local/bin:$PATH" >> $GITHUB_ENV
        
        # Always ensure pip is up to date
        python -m pip install --upgrade pip
        
        if [[ "${{ steps.python-cache.outputs.cache-hit }}" != "true" ]]; then
          echo "Cache miss - installing all dependencies"
          python -m pip install -r requirements.txt
          python -m pip install -e .
        else
          echo "Cache hit - reinstalling packages to ensure they're available"
          # Even with cache, we need to reinstall to ensure everything is in PATH
          python -m pip install --force-reinstall --no-deps -r requirements.txt
          python -m pip install -e . --no-deps --force-reinstall
        fi
        
        # Verify tools are available
        echo "Checking tool availability:"
        which python
        which pip
        which black || echo "black not found in PATH"
        which ruff || echo "ruff not found in PATH"
        which pytest || echo "pytest not found in PATH"

    - name: Verify installation
      shell: bash
      run: |
        echo "=== Installed packages ==="
        pip list 2>/dev/null | head -20 || true
        echo "..."
        echo "=== Package location ==="
        python -c "import ovmobilebench; print(f'Package installed at: {ovmobilebench.__file__}')" || echo "Package not found"
        echo "=== CLI availability ==="
        which ovmobilebench || echo "CLI not in PATH"